searchState.loadedDescShard("alloy_zksync", 0, "alloy-zksync\nThis module contains contract definitions and utilities …\nDefinition of the ZKsync network type.\n<code>anvil-zksync</code> bindings.\nZKsync provider.\nZKsync-specific type definitions.\nHelper utilities.\nZKsync wallet.\nCommon contract utilities and definitions.\nLayer 1 (L1) contract definitions and utilities. This …\nLayer 2 (L2) contract definitions and utilities. This …\nZKsync-specific utilities related to ERC20 contracts.\nABI for an ERC20 contract.\nContainer for all the <code>ERC20</code> function calls.\nA <code>ERC20</code> instance.\nAll the selectors of this enum.\nReturns a reference to the address.\nCreates a new call builder for the [<code>allowance</code>] function.\nFunction with signature <code>allowance(address,address)</code> and …\nContainer type for the return parameters of the …\nCreates a new call builder for the [<code>approve</code>] function.\nFunction with signature <code>approve(address,uint256)</code> and …\nContainer type for the return parameters of the …\nSets the address and returns <code>self</code>.\nCreates a new call builder using this contract instance’…\nCreates a new call builder for the [<code>decimals</code>] function.\nFunction with signature <code>decimals()</code> and selector <code>0x313ce567</code>.\nContainer type for the return parameters of the <code>decimals()</code> …\nCreates a new event filter using this contract instance’…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new call builder for the [<code>name</code>] function.\nFunction with signature <code>name()</code> and selector <code>0x06fdde03</code>.\nContainer type for the return parameters of the <code>name()</code> …\nCreates a new wrapper around an on-chain <code>ERC20</code> contract …\nCreates a new wrapper around an on-chain <code>ERC20</code> contract …\nReturns a reference to the provider.\nSets the address.\nCreates a new call builder for the [<code>symbol</code>] function.\nFunction with signature <code>symbol()</code> and selector <code>0x95d89b41</code>.\nContainer type for the return parameters of the <code>symbol()</code> …\nClones the provider and returns a new instance with the …\nBridgehub contract for handling L2 transaction requests …\nL1Bridge contract for interacting with Layer 2 bridges.\nBridgehub contract for handling L2 transaction requests …\nRepresents a canonical L2 transaction.\nRepresents a direct L2 transaction request.\nRepresents an L2 transaction request involving two bridges.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContainer for all the <code>Bridgehub</code> function calls.\nContainer for all the <code>Bridgehub</code> events.\nA <code>Bridgehub</code> instance.\nEmitted when a new priority request is made.\nCreates a new event filter for the <code>NewPriorityRequest</code> …\nAll the selectors of this enum.\nAll the selectors of this enum.\nReturns a reference to the address.\nSets the address and returns <code>self</code>.\nCreates a new call builder using this contract instance’…\nCreates a new event filter using this contract instance’…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new call builder for the [<code>l2TransactionBaseCost</code>] …\nCalculates the base cost of an L2 transaction.\nCalculates the base cost of an L2 transaction.\nCreates a new wrapper around an on-chain <code>Bridgehub</code> …\nCreates a new wrapper around an on-chain <code>Bridgehub</code> …\nReturns a reference to the provider.\nCreates a new call builder for the […\nRequests a direct L2 transaction.\nRequests a direct L2 transaction.\nCreates a new call builder for the […\nRequests an L2 transaction involving two bridges.\nRequests an L2 transaction involving two bridges.\nSets the address.\nClones the provider and returns a new instance with the …\nL1Bridge contract for interacting with Layer 2 bridges.\nContainer for all the <code>L1Bridge</code> function calls.\nA <code>L1Bridge</code> instance.\nAll the selectors of this enum.\nReturns a reference to the address.\nSets the address and returns <code>self</code>.\nCreates a new call builder using this contract instance’…\nCreates a new event filter using this contract instance’…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new call builder for the [<code>l2BridgeAddress</code>] …\nRetrieves the address of the L2 bridge for a given chain …\nRetrieves the address of the L2 bridge for a given chain …\nCreates a new wrapper around an on-chain <code>L1Bridge</code> contract …\nCreates a new wrapper around an on-chain <code>L1Bridge</code> contract …\nReturns a reference to the provider.\nSets the address.\nClones the provider and returns a new instance with the …\nContract deployer utilities.\nL2Bridge contract.\nThe address of the contract deployer.\nEvent emitted when a contract is deployed. Event with …\nFunction to create a contract using create2. Function with …\nFunction to create a contract using create2. Container …\nFunction to create a contract. Function with signature …\nFunction to create a contract. Container type for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nL2Bridge contract for finalizing deposits from Layer 1.\nContainer for all the <code>L2Bridge</code> function calls.\nA <code>L2Bridge</code> instance.\nAll the selectors of this enum.\nReturns a reference to the address.\nSets the address and returns <code>self</code>.\nCreates a new call builder using this contract instance’…\nCreates a new event filter using this contract instance’…\nCreates a new call builder for the [<code>finalizeDeposit</code>] …\nFinalizes a deposit from Layer 1 to Layer 2.\nFinalizes a deposit from Layer 1 to Layer 2.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new wrapper around an on-chain <code>L2Bridge</code> contract …\nCreates a new wrapper around an on-chain <code>L2Bridge</code> contract …\nReturns a reference to the provider.\nSets the address.\nClones the provider and returns a new instance with the …\nZKsync Network implementation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSee Header.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSee HeaderResponse.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReceipt for ZKsync-native EIP712 transaction.\nReceipt for an Ethereum-native transaction.\nReceipt envelope is a wrapper around the receipt data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTransaction receipt type that includes L2 specific fields.\nReturns the authorization list for the transaction.\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nHash of the block this transaction was included within.\nNumber of the block this transaction was included within.\nAddress of the created contract, or <code>None</code> if the …\nReturns the cumulative gas used at this receipt.\nEffective gas price.\nReturns the argument unchanged.\nAddress of the sender.\nGas used by this transaction alone.\nCalls <code>U::from(self)</code>.\nNumber of the l1 batch this transaction was included …\nIndex of transaction in l1 batch.\nL2 to L1 logs generated within this transaction.\nLogs generated within this transaction.\nTransaction receipt’s logs bloom.\nThe post-transaction state root (pre Byzantium)\nStatus of the transaction.\nAddress of the receiver.\nTransaction Hash.\nIndex within the block.\nTransaction request supporting ZKsync’s EIP-712 …\nGet the custom signature for the transaction.\nGet the factory deps for the transaction.\nReturns the argument unchanged.\nGet the gas per pubdata for the transaction.\nCalls <code>U::from(self)</code>.\nGet the paymaster params for the transaction.\nSet the custom signature  for the transaction.\nSet the factory deps  for the transaction.\nSet the gas per pubdata  for the transaction.\nSet the paymaster params for the transaction.\nBuilder-pattern method for building a ZKsync EIP-712 …\nBuilder-pattern method for building a ZKsync EIP-712 …\nBuilder-pattern method for setting custom signature.\nBuilder-pattern method for setting factory deps.\nBuilder-pattern method for setting gas per pubdata.\nBuilder-pattern method for setting paymaster params.\nZKsync transaction response.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nZKsync-native EIP712 transaction.\nEthereum-native transaction.\nTransaction envelope is a wrapper around the transaction …\nReturns the [<code>TxEip1559</code>] variant if the transaction is an …\nReturns the [<code>TxEip2930</code>] variant if the transaction is an …\nReturns the [<code>TxEip4844</code>] variant if the transaction is an …\nReturns the <code>TxEip712</code> variant if the transaction is an …\nReturns the [<code>TxEip7702</code>] variant if the transaction is an …\nReturns the [<code>TxLegacy</code>] variant if the transaction is a …\nReturn the length of the inner txn, including type byte …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the transaction is an EIP-1559 transaction.\nReturns true if the transaction is an EIP-2930 transaction.\nReturns true if the transaction is an EIP-4844 transaction.\nReturns true if the transaction is an EIP-712 transaction.\nReturns true if the transaction is an EIP-7702 transaction.\nReturns true if the transaction is a legacy transaction.\nReturns true if the transaction is replay protected.\nReturn the reference to signature.\nCalculate the signing hash for the transaction.\nReturn the hash of the inner Signed.\nReturn the <code>TxType</code> of the inner txn.\nEIP-1559 transaction type.\nEIP-2930 transaction type.\nEIP-4844 transaction type.\nZKsync-specific EIP712-based transaction type.\nEIP-7702 transaction type.\nLegacy transaction type.\nTransaction types supported by the Era network.\nTries to represent transaction as an Ethereum transaction …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nZKsync-specific EIP-712 transaction type.\nEthereum-native transaction type, e.g. legacy or EIP-1559.\nZKsync transaction type.\nEIP-712 transaction type, specific to the ZKsync network.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nErrors that can occur during bytecode hashing.\nRepresents the EIP-712 metadata for ZKsync transactions.\nRepresents the paymaster parameters for ZKsync Era …\nA ZKsync-native transaction type with additional fields. …\nEIP-155: Simple replay attack protection\nCustom signature for the transaction.\nReturns the effective gas price for the given <code>base_fee</code>.\nZKsync-specific fields.\nFactory dependencies for the transaction. Used during the …\nComputes the hashes of the factory dependencies.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAddress of the sender of the message.\nA scalar value equal to the maximum amount of gas that …\nGas per pubdata for the transaction.\nThe 32-byte hash of the bytecode of a zkSync contract is …\nInput has two uses depending if transaction is Create or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA scalar value equal to the maximum amount of gas that …\nMax Priority fee that transaction is paying\nA scalar value equal to the number of transactions sent by …\nAddress of the paymaster.\nPaymaster input.\nPaymaster parameters for the transaction.\nAddress of the receiver of the message. Unlike with other …\nA scalar value equal to the number of Wei to be …\nBuilder for launching <code>anvil-zksync</code>.\nErrors that can occur when working with the <code>AnvilZKsync</code>.\nAn anvil-zksync CLI instance. Will close the instance when …\nAn error occurred while deserializing a private key.\nAn error occurred while parsing a hex string.\nNo private keys were found.\nThe child anvil-zksync process’s stderr was not captured.\nThe port could not be parsed.\nThe private key could not be parsed.\nA line could not be read from the anvil-zksync stderr.\nSpawning the anvil-zksync process failed.\nTimed out waiting for a message from anvil-zksync’s …\nReturns the addresses used to instantiate this instance\nAdds an argument to pass to the <code>anvil-zksync</code>.\nAdds multiple arguments to pass to the <code>anvil-zksync</code>.\nCreates an AnvilZKsync builder which will execute …\nSets the block-time in seconds which will be used when the …\nReturns the chain of the anvil-zksync instance\nSets the chain_id the <code>anvil-zksync</code> instance will use.\nReturns a reference to the child process.\nReturns a mutable reference to the child process.\nReturns the HTTP endpoint of this instance\nReturns the HTTP endpoint url of this instance\nSets the <code>fork</code> argument to fork from another currently …\nSets the <code>fork-block-number</code> which will be used in addition …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the private keys used to instantiate this instance\nSets the mnemonic which will be used when the <code>anvil-zksync</code> …\nCreates an empty AnvilZKsync builder. The default port is …\nSets the no-mine status which will be used when the …\nSets the <code>path</code> to the <code>anvil-zksync</code> cli\nReturns the port of this instance\nSets the port which will be used when the <code>anvil-zksync</code> …\nConsumes the builder and spawns <code>anvil-zksync</code>.\nSets the timeout which will be used when the <code>anvil-zksync</code> …\nConsumes the builder and spawns <code>anvil-zksync</code>. If spawning …\nType that handles deposit logic for various scenarios: …\nType for deposit request. This type only stores the …\nEnum to describe errors that might occur during L1 -&gt; L2 …\nA wrapper struct to hold L1 transaction receipt and L2 …\nZKsync-specific extensions for the <code>ProviderBuilder</code>.\nZKsync provider is an extension trait for the <code>Provider</code> …\nTrait for ZKsync provider with populated wallet Contains …\nReturns the amount to deposit.\nAmount to deposit in Wei.\nEnable or disable automatic submission of ERC20 approval …\nBridge address for the deposit. If None, default shared …\nDeposits specified L1 token to the L2 address.\nEstimates transaction gas for a transaction.\nEstimates the gas required for an L1 to L2 transaction.\nExecutes specified deposit request. This will handle:\nZKsync-specific transaction data filler.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas per pubdata limit to use in initiated transactions. If …\nGets all account balances for a given address.\nRetrieves the L1 base token address.\nRetrieves details for a given L2 block.\nRetrieves the addresses of canonical bridge contracts for …\nRetrieves the bridge hub contract address.\nRetrieves the bytecode of a transaction by its hash.\nRetrieves the current fee parameters.\nReturns the range of blocks contained within a batch given …\nRetrieves details for a given L1 batch.\nGets the latest L1 batch number.\nGets the L1 Chain ID.\nRetrieves the current L1 gas price.\nRetrieves the log proof for an L2 to L1 transaction.\nRetrieves the proof for an L2 to L1 message.\nReturns a <code>PendingTransactionBuilder</code> for the L2 …\nGets the address of the main ZKsync contract on L1.\nGenerates Merkle proofs for one or more storage values …\nGets the protocol version.\nLists transactions in a native encoding (e.g. that has …\nReturns a receipt for the L1 operation.\nGets the address of the testnet paymaster ZKsync contract …\nRetrieves details for a given transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nZKsync-specific provider layers.\nPrepares an executor for a particular deposit request.\nCreates a new <code>L1TransactionReceipt</code> object.\nInitiates a new deposit request.\nBuild a provider that would spawn <code>anvil-zksync</code> instance in …\nSame as <code>on_anvil_zksync</code>, allows to configure <code>anvil-zksync</code>.\nSame as <code>on_anvil_zksync</code>, but also configures a wallet …\nSame as <code>on_anvil_zksync_with_wallet</code>, allows to configure …\nReceiver of deposited assets. If None, the sender address …\nL1 token address to deposit.\nFallible version of <code>on_anvil_zksync_with_wallet_and_config</code>.\nEnables or disables auto-approval for ERC20 tokens.\nSets the bridge address.\nSets the gas per pubdata limit for the transaction.\nSets the receiver for the deposit.\nSets the token address for the deposit.\nConvenience function to initialize provider builder for …\nFiller for EIP-712 transaction type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLayer for <code>anvil-zksync</code> wrapper.\nA layer that wraps an <code>AnvilZKsync</code> config.\nA provider that wraps an <code>AnvilZKsyncInstance</code>, preventing …\nGet the instance http endpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStarts the anvil instance, or gets a reference to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>AnvilZKsyncProvider</code> with the given inner …\nHashes of base system contracts.\nConversion ratio between BaseToken and ETH.\nResponse type for <code>zks_getBlockDetails</code>.\nCurrent status of the batch.\nResponse type for <code>zks_getBridgeContracts</code>.\nResponse type for <code>zks_estimateFee</code>.\nThe transaction execution failed.\nStatic fee model parameters for the V1 fee model (no …\nStatic fee model parameters for the V2 fee model.\nResponse type for <code>zks_getFeeParams</code>.\nDynamic fee model parameters for the V1 fee model (no …\nDynamic fee model parameters for the V2 fee model.\nThe transaction is included in the block.\nResponse type for <code>zks_getL1BatchDetails</code>.\nConfiguration of the L1 verifier contract.\nType for L2 to L1 logs that are returned as a part of …\nResponse type for <code>zks_getL2ToL1LogProof</code> and …\nA log produced by a transaction.\nThe transaction is not executed yet.\nResponse type for <code>zks_getProof</code>.\nResponse type for <code>zks_getProtocolVersion</code>.\nThe block has been fully executed on L2.\nLog of a storage access.\nMerkle proof for a storage value.\nResponse type for <code>zks_getTransactionDetails</code>.\nCurrent status of the transaction.\nV1 fee model parameters (no longer in active use).\nV2 fee model parameters.\nThe block has been verified on L1.\nThe transaction is verified on L1.\nAccount address associated with the storage proofs.\nAddress from which this log originated.\nHashes of the base system contracts.\nHashes for the base system contracts used for block …\nHashes of the base system contracts involved in the batch.\nOverhead in L1 gas for a batch of transactions.\nHash of the block where this log was in.\nHash of the block where this log was in.\nBlock number where this log was in.\nBlock number where this log was in.\nUnix timestamp of when the first transaction in the block …\nHash of the bootloader system contract.\nBootloader code hash.\nTx hash of the transaction in the ZKsync network. …\nTx hash of the transaction in the ZKsync network. …\nTransaction hash of the commit operation on L1 for the …\nL1 transaction hash for the commit operation.\nTimestamp when the batch containing this L2 block was …\nTimestamp when the batch was committed on L1.\nCommon information about the transaction.\nCompute overhead part in fee calculation.\nStatic fee model parameters.\nStatic parameters.\nBaseToken&lt;-&gt;ETH conversion ratio.\nContains non-indexed arguments of the log.\nHash of the default account abstraction system contract.\nDefault account code hash.\nDenominator of the conversion ratio.\nBlock in which Ethereum transaction was included.\nTransaction hash of the commit operation.\nTransaction hash of the execution.\nTransaction hash of the proof submission.\nHash of the evm emulator system contract.\nEVM emulator code hash.\nDetails regarding the execution of the transaction.\nTransaction hash of the execution on L1 for the batch …\nL1 transaction hash for the execution.\nTimestamp when the execution was completed on L1 for the …\nTimestamp when the execution was completed.\nFactory dependencies: list of contract bytecodes …\nCost of publishing one byte (in wei).\nCost of publishing one byte (in wei).\nTransaction fee.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe total cost the sender paid for the transaction.\nAmount of gas to be spent on the transaction.\nThe maximum number of gas that a transaction can spend at …\nThe maximum number of gas that a transaction can spend at …\nGas amount per unit of public data for this transaction.\nMaximum gas user agrees to spend on a single pubdata byte …\nThe maximum number of gas per 1 byte of pubdata.\nThe maximum number of gas per 1 byte of pubdata.\nThe position of the leaf in the Merkle tree of L2 to L1 …\nA 1-based index representing the position of the tree …\nAddress of the transaction initiator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the transaction originated on Layer 1.\nA boolean flag that indicates whether the log is a service …\nStorage key for which the proof is provided.\nKey and value are two 32-byte values that can be used to …\nCorresponding L1 batch number.\nL1 batch number where this log was in.\nL1 batch number where this log was in.\nThe address of the default ERC-20 bridge on Layer 1.\nL1 gas price at the time of the block’s execution.\nGas price on L1 at the time of batch processing.\nL1 gas price.\nL1 gas price.\nPrice of storing public data on L1.\nThe address of the default shared bridge on Layer 1.\nNumber of L1 transactions included in the block.\nNumber of L1 transactions included in the batch.\nThe address of the Wrapped Ethereum (WETH) bridge on Layer …\nThe address of the default ERC-20 bridge on Layer 2.\nFair gas price on L2 at the time of the block’s …\nFair gas price on L2 at the time of batch processing.\nThe address of the legacy shared bridge on Layer 2.\nThe address of the default shared bridge on Layer 2.\nHash of the transaction used for the system upgrade\nNumber of L2 transactions included in the block.\nNumber of L2 transactions associated with this batch.\nThe address of the Wrapped Ethereum (WETH) bridge on Layer …\nAdditional payment to the operator as an incentive to …\nLog index position in the block.\nLog index position in the block.\nLog type.\nEIP-1559 gas price.\nThe maximal fee per gas to be used for L1-&gt;L2 transaction\nThe maximal fee per gas to be used for L1-&gt;L2 transaction\nMaximum gas allowed per batch.\nEIP-1559 tip.\nMaximum amount of public data allowed per batch.\nMinimal gas price on L2.\nThe minimal acceptable L2 gas price, i.e. the price that …\nMinor version of the protocol (corresponds to the used …\nNumber of the block.\nL1 batch number.\nNumerator of the conversion ratio.\nIndicator that the operation can interact with Rollup and …\nAddress of the operator who committed the block.\nPriority operations queue type.\nHashes that constitute the Merkle path from the leaf node …\nThe Merkle proof for the message.\nVersion of the ZKsync protocol the block was committed …\nTransaction hash of the proof submission on L1 for the …\nL1 transaction hash for the proof submission.\nTimestamp when the proof was submitted on L1 for the batch …\nTimestamp when the proof was submitted.\nPublic data overhead part in fee calculation.\nRaw bytes of the transaction.\nTimestamp when the transaction was received.\nTimestamp when the transaction was received, in …\nVerification key hash for the topmost recursion level.\nThe recipient of the refund of the transaction\nThe recipient of the refund of the transaction\nTrue when the log was removed, false if it’s a valid log.\nThe root hash representing the Merkle tree root at the …\nHash of the L2 block.\nRoot hash of the state after processing the batch.\nThe value of this in the frame where the L2 to L1 log was …\nSender of the transaction.\nSender of the transaction.\nUnique ID of the priority operation.\nThe id of the shard the opcode was called (it is currently …\nCurrent status of the block: verified or sealed.\nCurrent status of the transaction: pending, included, …\nCurrent status of the batch: sealed or verified.\nStorage proof for the requested keys.\nUnix timestamp of when the first transaction in the block …\nUnix timestamp when the batch was processed.\nUnix timestamp of the version’s activation.\nThe amount of ETH that should be minted with this …\nThe amount of ETH that should be minted with this …\nAn array of 0 to 4 indexed log arguments.\nHash of the transactions from which this log was created.\nHash of the transactions from which this log was created.\nTransaction index position from which the log created.\nTransaction index position from which the log created.\nLog index position in the transaction.\nLog index position in the transaction.\nThe number of the transaction in the batch where the log …\nID of the upgrade.\nValue stored in the specified storage key at the time of …\nKey and value are two 32-byte values that can be used to …\nHashes of various verification keys used in the protocol.\nETH address on L1.\nUtility function that converts an L1 address to the L2 …\nA wallet capable of signing any transaction for the …\nGet the default signer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new signer with the given signer as the default …\nRegister a new signer on this object, and set it as the …\nRegister a new signer on this object. This signer will be …\nGet the signer for the given address.")